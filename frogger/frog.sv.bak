//-------------------------------------------------------------------------
//    Ball.sv                                                            --
//    Viral Mehta                                                        --
//    Spring 2005                                                        --
//                                                                       --
//    Modified by Stephen Kempf 03-01-2006                               --
//                              03-12-2007                               --
//    Translated by Joe Meng    07-07-2013                               --
//    Fall 2014 Distribution                                             --
//                                                                       --
//    For use with ECE 298 Lab 7                                         --
//    UIUC ECE Department                                                --
//-------------------------------------------------------------------------
/*
module  ball ( input Reset, frame_clk,
					input [7:0] keycode,
					output [10:0]  BallX, BallY, BallS);
		
    
    logic [10:0] Ball_X_Pos, Ball_X_Motion, Ball_Y_Pos, Ball_Y_Motion, Ball_Size;
	 
    //parameter [10:0] Ball_X_Center=320;  // Center position on the X axis
    //parameter [10:0] Ball_Y_Center=240;  // Center position on the Y axis
    parameter [10:0] Ball_X_Start=320;       // Leftmost point on the X axis
    parameter [10:0] Ball_Y_Start=440;       // Leftmost point on the X axis
	 
    parameter [10:0] Ball_X_Min=0;       // Leftmost point on the X axis
    parameter [10:0] Ball_X_Max=639;     // Rightmost point on the X axis
    parameter [10:0] Ball_Y_Min=0;       // Topmost point on the Y axis
    parameter [10:0] Ball_Y_Max=479;     // Bottommost point on the Y axis
    parameter [10:0] Ball_X_Step=3;      // Step size on the X axis
    parameter [10:0] Ball_Y_Step=3;      // Step size on the Y axis

    assign Ball_Size = 4; 
   
    always_ff @ (posedge Reset or posedge frame_clk )
    begin: Move_Ball
        if (Reset)  // Asynchronous Reset
        begin 
            Ball_Y_Motion <= 10'd0; //Ball_Y_Step;
				Ball_X_Motion <= 10'd0; //Ball_X_Step;
				Ball_Y_Pos <= Ball_Y_Start;
				Ball_X_Pos <= Ball_X_Start;
        end
           
        else 
    begin 
		if ( (Ball_Y_Pos + Ball_Size) >= Ball_Y_Max )  // Ball is at the bottom edge, BOUNCE!
		begin
			  Ball_Y_Motion <= (~ (Ball_Y_Step) + 1'b1);  // 2's complement.	
			  //Ball_Y_Motion <= 10'd0;
			  Ball_X_Motion <= 10'd0; //No Diagonal
		end				 
		 
		 else if ( (Ball_Y_Pos - Ball_Size) <= Ball_Y_Min )  // Ball is at the top edge, BOUNCE!
		 begin
			  Ball_Y_Motion <= Ball_Y_Step;
			  //Ball_Y_Motion <= 10'd0;
			  Ball_X_Motion <= 10'd0;  //No Diagonal 
			  
			end 			
		 else if ((Ball_X_Pos + Ball_Size) >= Ball_X_Max )  // Ball is at the right edge, BOUNCE!
		 begin
			  Ball_X_Motion <= (~ (Ball_X_Step) + 1'b1);		//2's complement. 
			  //Ball_X_Motion <= 10'd0;
			  Ball_Y_Motion <= 10'd0;  //No Diagonal
		 end
		 else if ((Ball_X_Pos - Ball_Size) <= Ball_X_Min )  // Ball is at the left edge, BOUNCE!
		 begin
			  Ball_X_Motion <= Ball_X_Step; 	
			  //Ball_X_Motion <= 10'd0;  
			  Ball_Y_Motion <= 10'd0;  //No Diagonal
		 end
		 else 
			 begin
			  if(keycode == 8'b01010000) // left 	0x04
				  begin
						Ball_X_Motion <= (~ (Ball_X_Step) + 1'b1);
						Ball_Y_Motion <= 10'd0;
				  end
			 else if (keycode == 8'b01010010) // up 	0x1A
				  begin
						Ball_Y_Motion <= (~ (Ball_Y_Step) + 1'b1);
						Ball_X_Motion <= 10'd0;
				  end
			 else if (keycode == 8'b01001111) // right 	0x07
				  begin
						Ball_X_Motion <= Ball_X_Step;
						Ball_Y_Motion <= 10'd0;	
					end
			 else if (keycode == 8'b01010001) // down  0x16
				  begin
						Ball_Y_Motion <= Ball_Y_Step; 
						Ball_X_Motion <= 10'd0;
					end
			  else
				 // begin
						Ball_Y_Motion <= 10'd0; 
						Ball_X_Motion <= 10'd0;
				//  end
			  end 
			  //Ball_Y_Motion <= Ball_Y_Motion;  // Ball is somewhere in the middle, don't bounce, just keep moving
			  //Ball_X_Motion <= Ball_X_Motion;		  
					  				 
				Ball_Y_Pos <= (Ball_Y_Pos + Ball_Y_Motion);  // Update ball position
				Ball_X_Pos <= (Ball_X_Pos + Ball_X_Motion);
		end 
    end	  
    assign BallX = Ball_X_Pos;
   
    assign BallY = Ball_Y_Pos;
   
    assign BallS = Ball_Size;
	 
endmodule
*/

//-------------------------------------------------------------------------
//    Ball.sv                                                            --
//    Viral Mehta                                                        --
//    Spring 2005                                                        --
//                                                                       --
//    Modified by Stephen Kempf 03-01-2006                               --
//                              03-12-2007                               --
//    Translated by Joe Meng    07-07-2013                               --
//    Fall 2014 Distribution                                             --
//                                                                       --
//    For use with ECE 298 Lab 7                                         --
//    UIUC ECE Department                                                --
//-------------------------------------------------------------------------


module  ball ( input Reset, frame_clk,
					input [7:0] keycode,
               output [10:0]  BallX, BallY, BallS, LogX, LogY, LogS );
    
    logic [10:0] Ball_X_Pos, Ball_X_Motion, Ball_Y_Pos, Ball_Y_Motion, Ball_Size;
	 logic [10:0] Log_X_Pos, Log_X_Motion, Log_Y_Pos, Log_Y_Motion, Log_Size;
	 
    //parameter [10:0] Ball_X_Center=320;  // Center position on the X axis
    //parameter [10:0] Ball_Y_Center=240;  // Center position on the Y axis
    parameter [10:0] Ball_X_Start=320;       // Leftmost point on the X axis
    parameter [10:0] Ball_Y_Start=440;       // Leftmost point on the X axis
	 
    parameter [10:0] Ball_X_Min=0;       // Leftmost point on the X axis
    parameter [10:0] Ball_X_Max=639;     // Rightmost point on the X axis
    parameter [10:0] Ball_Y_Min=0;       // Topmost point on the Y axis
    parameter [10:0] Ball_Y_Max=479;     // Bottommost point on the Y axis
    parameter [10:0] Ball_X_Step=1;      // Step size on the X axis
    parameter [10:0] Ball_Y_Step=1;      // Step size on the Y axis
	 
	 parameter [10:0] Log_X_Start = 0;
	 parameter [10:0] Log_Y_Start = 71;
	 parameter [10:0] Log_X_Step = 1;
	 parameter [10:0] Log_Y_Step = 0;
	 
    assign Ball_Size = 4;  // assigns the value 4 as a 10-digit binary number, ie "0000000100"
	 assign Log_X_Size = 24;
	 assign Log_Y_Size = 31;
	 assign Log_Y_Motion = 0;
	
    always_ff @ (posedge Reset or posedge frame_clk )
    begin: Move_Ball
        if (Reset)  // Asynchronous Reset
        begin 
            Ball_Y_Motion <= 11'd0; //Ball_Y_Step;
				Ball_X_Motion <= 11'd0; //Ball_X_Step;
				Ball_Y_Pos <= Ball_Y_Start;
				Ball_X_Pos <= Ball_X_Start;
				
				Log_Y_Motion <= 11'd0;
				Log_X_Motion <= 11'd0;
				Log_X_Pos <= Log_X_Start;
				Log_Y_Pos <= Log_Y_Start;
        end
           
        else 
        begin 
				 if ( (Ball_Y_Pos + Ball_Size) >= Ball_Y_Max )  // Ball is at the bottom edge, BOUNCE!
				 begin
					  Ball_Y_Motion <= (~ (Ball_Y_Step) + 1'b1);  // 2's complement.	
					  //Ball_Y_Motion <= 10'd0;
					  Ball_X_Motion <= 11'd0; //No Diagonal
				 end
				 else if ( (Ball_Y_Pos - Ball_Size) <= Ball_Y_Min )  // Ball is at the top edge, BOUNCE!
				 begin
					  Ball_Y_Motion <= Ball_Y_Step;
					  //Ball_Y_Motion <= 10'd0;
					  Ball_X_Motion <= 11'd0;  //No Diagonal
				 end	  
				 else if ( (Ball_X_Pos + Ball_Size) >= Ball_X_Max )  // Ball is at the right edge, BOUNCE!
				 begin
					  Ball_X_Motion <= (~ (Ball_X_Step) + 1'b1);		//2's complement. 
					  //Ball_X_Motion <= 10'd0;
					  Ball_Y_Motion <= 11'd0;  //No Diagonal
				 end
				 else if ( (Ball_X_Pos - Ball_Size) <= Ball_X_Min )  // Ball is at the left edge, BOUNCE!
				 begin
					  Ball_X_Motion <= Ball_X_Step; 	
					  //Ball_X_Motion <= 10'd0;  
					  Ball_Y_Motion <= 11'd0;  //No Diagonal
				 end 
				 
				 //Log movement restriction code
				 else if ( (Log_X_Pos + Log_X_Size) >= Ball_X_Max )
				 begin
					  Log_X_Motion  <= 11'd0;
				 end
				 
				 else if ( (Log_X_Pos - Log_X_Size) <= Ball_X_Min )
				 begin
					  Log_X_Motion  <= 11'd0;
				 end
				 
				 else 
					  
					  begin
					  if(keycode == 8'b01010000) // left 	0x04
						  begin
								Ball_X_Motion <= (~ (Ball_X_Step) + 1'b1);
								Ball_Y_Motion <= 11'd0;
						  end
				     else if (keycode == 8'b01010010) // up 	0x1A
						  begin
								Ball_Y_Motion <= (~ (Ball_Y_Step) + 1'b1);
								Ball_X_Motion <= 11'd0;
						  end
				     else if (keycode == 8'b01001111) // right 	0x07
						  begin
								Ball_X_Motion <= Ball_X_Step;
								Ball_Y_Motion <= 11'd0;	
							end
				     else if (keycode == 8'b01010001) // down  0x16
						  begin
								Ball_Y_Motion <= Ball_Y_Step; 
								Ball_X_Motion <= 11'd0;
							end
					  //When log should move, should always be moving
					  else if (keycode >= 8'b00000000)
						  begin
								Log_X_Motion <= Log_X_Step;
						  end
						  
					  else
						  begin
								Ball_Y_Motion <= 11'd0; 
								Ball_X_Motion <= 11'd0;
								Log_X_Motion <= 11'd0;
						  end
					  end 
					  //Ball_Y_Motion <= Ball_Y_Motion;  // Ball is somewhere in the middle, don't bounce, just keep moving
					  //Ball_X_Motion <= Ball_X_Motion;		  
					  				 
				Ball_Y_Pos <= (Ball_Y_Pos + Ball_Y_Motion);  // Update ball position
				Ball_X_Pos <= (Ball_X_Pos + Ball_X_Motion);
				Log_X_Pos <= (Log_X_Pos + Log_X_Motion);
				Log_Y_Pos <= 11'd0;
			
			
	  /**************************************************************************************
	    ATTENTION! Please answer the following quesiton in your lab report! Points will be allocated for the answers!
		 Hidden Question #2/2:
          Note that Ball_Y_Motion in the above statement may have been changed at the same clock edge
          that is causing the assignment of Ball_Y_pos.  Will the new value of Ball_Y_Motion be used,
          or the old?  How will this impact behavior of the ball during a bounce, and how might that 
          interact with a response to a keypress?  Can you fix it?  Give an answer in your Post-Lab.
      **************************************************************************************/
			
        end  
    end
       
    assign BallX = Ball_X_Pos;
   
    assign BallY = Ball_Y_Pos;
   
    assign BallS = Ball_Size;
	 
	 assign LogX = Log_X_Pos;
	 
	 assign LogY = Log_Y_Pos;
    

endmodule

/*
8'b01010000
8'b01010010
8'b01001111
8'b01010001
*/

